/**
 * NOTE: This class is auto generated by the swagger responseCode generator program (3.0.42).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.eclipse.tractusx.managedidentitywallets.swagger.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.eclipse.tractusx.managedidentitywallets.swagger.model.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;

@javax.annotation.processing.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-05-24T08:44:38.406697803Z[GMT]")
@Validated
@Tag(name = "Wallets", description = "the Wallets API")
public interface WalletsApi {

    @Operation(summary = "Store Verifiable Credential", description = "Permission: **update_wallets** OR **update_wallet** (The BPN of wallet to extract credentials from must equal BPN of caller)  Store a verifiable credential in the wallet of the given identifier")
    @ApiResponse(responseCode = "201", content = @Content(schema = @Schema(implementation = SuccessResponse.class)), description = "Success description")
    @ApiResponse(responseCode = "401", description = "The request could not be completed due to a failed authorization.", content = @Content(schema = @Schema(implementation = ExceptionResponse.class)))
    @ApiResponse(responseCode = "403", description = "The request could not be completed due to a forbidden access.", content = @Content(schema = @Schema(implementation = ExceptionResponse.class)))
    @ApiResponse(responseCode = "404", description = "The required entity does not exists", content = @Content(schema = @Schema(implementation = ExceptionResponse.class)))
    @ApiResponse(responseCode = "422", description = "The input can not be processed due to semantic mismatches", content = @Content(schema = @Schema(implementation = ExceptionResponse.class)))
    @RequestMapping(value = "/api/wallet/{identifier}/credentials",
            produces = "application/json",
            consumes = "application/json",
            method = RequestMethod.POST)
    ResponseEntity<SuccessResponse> apiWalletIdentifierCredentialsPost(@Parameter(required = true) @PathVariable("identifier") String identifier, @Parameter(description = "The verifiable credential to be stored", required = true) @Valid @RequestBody IssuedVerifiableCredentialRequestDto body);


    @Operation(summary = "Retrieve wallet by identifier", description = "Permission: **view_wallets** OR **view_wallet** (The BPN of Wallet to retrieve must equal the BPN of caller)  Retrieve single wallet by identifier, with or without its credentials")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "The wallet", content = @Content(schema = @Schema(implementation = WalletDto.class))),
            @ApiResponse(responseCode = "400", description = "The input does not comply to the syntax requirements", content = @Content(schema = @Schema(implementation = ExceptionResponse.class))),
            @ApiResponse(responseCode = "401", description = "The request could not be completed due to a failed authorization.", content = @Content(schema = @Schema(implementation = ExceptionResponse.class))),
            @ApiResponse(responseCode = "403", description = "The request could not be completed due to a forbidden access.", content = @Content(schema = @Schema(implementation = ExceptionResponse.class))),
            @ApiResponse(responseCode = "404", description = "The required entity does not exists", content = @Content(schema = @Schema(implementation = ExceptionResponse.class)))})
    @RequestMapping(value = "/api/wallet/{identifier}",
            produces = "application/json",
            method = RequestMethod.GET)
    ResponseEntity<WalletDto> apiWalletIdentifierGet(@Parameter(required = true) @PathVariable("identifier") String identifier, @NotNull @Parameter(required = true) @Valid @RequestParam(value = "withCredentials", required = true) Boolean withCredentials);


    @Operation(summary = "Create wallet", description = "Permission: **add_wallets**  Create a wallet and store it ")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Wallet was successfully created", content = @Content(schema = @Schema(implementation = WalletDto.class))),
            @ApiResponse(responseCode = "400", description = "The input does not comply to the syntax requirements", content = @Content(schema = @Schema(implementation = ExceptionResponse.class))),
            @ApiResponse(responseCode = "401", description = "The request could not be completed due to a failed authorization.", content = @Content(schema = @Schema(implementation = ExceptionResponse.class))),
            @ApiResponse(responseCode = "403", description = "The request could not be completed due to a forbidden access.", content = @Content(schema = @Schema(implementation = ExceptionResponse.class))),
            @ApiResponse(responseCode = "409", description = "The request could not be completed due to a conflict.", content = @Content(schema = @Schema(implementation = ExceptionResponse.class)))})
    @RequestMapping(value = "/api/wallet",
            produces = "application/json",
            consumes = "application/json",
            method = RequestMethod.POST)
    ResponseEntity<WalletDto> apiWalletPost(@Parameter(description = "wallet to create", required = true) @Valid @RequestBody WalletCreateDto body);


    @Operation(summary = "List of wallets", description = "Permission: **view_wallets**  Retrieve list of registered wallets")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "List of wallets",  content = @Content(array = @ArraySchema(schema = @Schema(implementation = WalletDto.class)))),
            @ApiResponse(responseCode = "401", description = "The request could not be completed due to a failed authorization.", content = @Content(schema = @Schema(implementation = ExceptionResponse.class))),
            @ApiResponse(responseCode = "403", description = "The request could not be completed due to a forbidden access.", content = @Content(schema = @Schema(implementation = ExceptionResponse.class)))})
    @RequestMapping(value = "/api/wallets",
            produces = "application/json",
            method = RequestMethod.GET)
    ResponseEntity<List<WalletDto>> apiWalletsGet();

}

