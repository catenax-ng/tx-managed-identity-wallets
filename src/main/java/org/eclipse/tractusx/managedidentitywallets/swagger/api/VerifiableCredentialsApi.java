/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.42).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.eclipse.tractusx.managedidentitywallets.swagger.api;

import io.swagger.annotations.*;
import io.swagger.model.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.processing.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-05-24T08:44:38.406697803Z[GMT]")
@Validated
@Api(value = "VerifiableCredentials", description = "the VerifiableCredentials API")
public interface VerifiableCredentialsApi {

    @ApiOperation(value = "Query Verifiable Credentials", nickname = "apiCredentialsGet", notes = "Permission: **view_wallets** OR **view_wallet** (The BPN of holderIdentifier must equal BPN of caller)  Search verifiable credentials with filter criteria", response = VerifiableCredentialDto.class, responseContainer = "List", tags={ "VerifiableCredentials", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The list of verifiable credentials matching the query, empty if no match found", response = VerifiableCredentialDto.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "The request could not be completed due to a failed authorization.", response = ExceptionResponse.class),
        @ApiResponse(code = 403, message = "The request could not be completed due to a forbidden access.", response = ExceptionResponse.class) })
    @RequestMapping(value = "/api/credentials",
        produces = "application/json", 
        method = RequestMethod.GET)
    ResponseEntity<List<VerifiableCredentialDto>> apiCredentialsGet(@ApiParam(value = "") @Valid @RequestParam(value = "holderIdentifier", required = false) String holderIdentifier, @ApiParam(value = "") @Valid @RequestParam(value = "id", required = false) String id, @ApiParam(value = "") @Valid @RequestParam(value = "issuerIdentifier", required = false) String issuerIdentifier, @ApiParam(value = "") @Valid @RequestParam(value = "type", required = false) List<String> type);


    @ApiOperation(value = "Issue a Use Case Verifiable Credential with base wallet issuer", nickname = "apiCredentialsIssuerDismantlerPost", notes = "Permission: **update_wallets** OR **update_wallet** (The BPN of base wallet must equal BPN of caller)  Issue a verifiable credential by base wallet", response = VerifiableCredentialDto.class, tags={ "VerifiableCredentials", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The created Verifiable Credential", response = VerifiableCredentialDto.class),
        @ApiResponse(code = 400, message = "The input does not comply to the syntax requirements", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "The request could not be completed due to a failed authorization.", response = ExceptionResponse.class),
        @ApiResponse(code = 403, message = "The request could not be completed due to a forbidden access.", response = ExceptionResponse.class),
        @ApiResponse(code = 422, message = "The input can not be processed due to semantic mismatches", response = ExceptionResponse.class) })
    @RequestMapping(value = "/api/credentials/issuer/dismantler",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<VerifiableCredentialDto> apiCredentialsIssuerDismantlerPost(@ApiParam(value = "The bpn of the holders wallet", required=true ) @Valid @RequestBody CreateDismantlerVCDto body);


    @ApiOperation(value = "Issue a Use Case Verifiable Credential with base wallet issuer", nickname = "apiCredentialsIssuerFrameworkPost", notes = "Permission: **update_wallets** OR **update_wallet** (The BPN of base wallet must equal BPN of caller)  Issue a verifiable credential by base wallet", response = VerifiableCredentialDto.class, tags={ "VerifiableCredentials", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The created Verifiable Credential", response = VerifiableCredentialDto.class),
        @ApiResponse(code = 400, message = "The input does not comply to the syntax requirements", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "The request could not be completed due to a failed authorization.", response = ExceptionResponse.class),
        @ApiResponse(code = 403, message = "The request could not be completed due to a forbidden access.", response = ExceptionResponse.class),
        @ApiResponse(code = 422, message = "The input can not be processed due to semantic mismatches", response = ExceptionResponse.class) })
    @RequestMapping(value = "/api/credentials/issuer/framework",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<VerifiableCredentialDto> apiCredentialsIssuerFrameworkPost(@ApiParam(value = "The bpn of the holders wallet", required=true ) @Valid @RequestBody CreateMembershipVCDto body);


    @ApiOperation(value = "Issue a Membership Verifiable Credential with base wallet issuer", nickname = "apiCredentialsIssuerMembershipPost", notes = "Permission: **update_wallets** OR **update_wallet** (The BPN of base wallet must equal BPN of caller)  Issue a verifiable credential by base wallet", response = VerifiableCredentialDto.class, tags={ "VerifiableCredentials", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The created Verifiable Credential", response = VerifiableCredentialDto.class),
        @ApiResponse(code = 400, message = "The input does not comply to the syntax requirements", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "The request could not be completed due to a failed authorization.", response = ExceptionResponse.class),
        @ApiResponse(code = 403, message = "The request could not be completed due to a forbidden access.", response = ExceptionResponse.class),
        @ApiResponse(code = 422, message = "The input can not be processed due to semantic mismatches", response = ExceptionResponse.class) })
    @RequestMapping(value = "/api/credentials/issuer/membership",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<VerifiableCredentialDto> apiCredentialsIssuerMembershipPost(@ApiParam(value = "The bpn of the holders wallet", required=true ) @Valid @RequestBody CreateMembershipVCDto body);


    @ApiOperation(value = "Issue a Verifiable Credential with base wallet issuer", nickname = "apiCredentialsIssuerPost", notes = "Permission: **update_wallets** OR **update_wallet** (The BPN of base wallet must equal BPN of caller)  Issue a verifiable credential by base wallet", response = VerifiableCredentialDto.class, tags={ "VerifiableCredentials", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The created Verifiable Credential", response = VerifiableCredentialDto.class),
        @ApiResponse(code = 400, message = "The input does not comply to the syntax requirements", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "The request could not be completed due to a failed authorization.", response = ExceptionResponse.class),
        @ApiResponse(code = 403, message = "The request could not be completed due to a forbidden access.", response = ExceptionResponse.class),
        @ApiResponse(code = 422, message = "The input can not be processed due to semantic mismatches", response = ExceptionResponse.class) })
    @RequestMapping(value = "/api/credentials/issuer",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<VerifiableCredentialDto> apiCredentialsIssuerPost(@ApiParam(value = "The verifiable credential input", required=true ) @Valid @RequestBody VerifiableCredentialRequestWithoutIssuerDto body);


    @ApiOperation(value = "Issue Verifiable Credential", nickname = "apiCredentialsPost", notes = "Permission: **update_wallets** OR **update_wallet** (The BPN of the issuer of the Verifiable Credential must equal BPN of caller)  Issue a verifiable credential with a given issuer DID", response = VerifiableCredentialDto.class, tags={ "VerifiableCredentials", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The created Verifiable Credential", response = VerifiableCredentialDto.class),
        @ApiResponse(code = 400, message = "The input does not comply to the syntax requirements", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "The request could not be completed due to a failed authorization.", response = ExceptionResponse.class),
        @ApiResponse(code = 403, message = "The request could not be completed due to a forbidden access.", response = ExceptionResponse.class),
        @ApiResponse(code = 422, message = "The input can not be processed due to semantic mismatches", response = ExceptionResponse.class) })
    @RequestMapping(value = "/api/credentials",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<VerifiableCredentialDto> apiCredentialsPost(@ApiParam(value = "The verifiable credential input data", required=true ) @Valid @RequestBody VerifiableCredentialRequestDto body);


    @ApiOperation(value = "Validate Verifiable Credential", nickname = "apiCredentialsValidationPost", notes = "Permission: **view_wallets** OR **view_wallet**  Validate Verifiable Credentials", response = VerifyResponse.class, tags={ "VerifiableCredentials", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The verification value", response = VerifyResponse.class),
        @ApiResponse(code = 400, message = "The input does not comply to the syntax requirements", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "The request could not be completed due to a failed authorization.", response = ExceptionResponse.class),
        @ApiResponse(code = 403, message = "The request could not be completed due to a forbidden access.", response = ExceptionResponse.class),
        @ApiResponse(code = 422, message = "The input can not be processed due to semantic mismatches", response = ExceptionResponse.class) })
    @RequestMapping(value = "/api/credentials/validation",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<VerifyResponse> apiCredentialsValidationPost(@ApiParam(value = "", defaultValue = "false") @Valid @RequestParam(value = "withDateValidation", required = false, defaultValue="false") Boolean withDateValidation, @ApiParam(value = "", defaultValue = "true") @Valid @RequestParam(value = "withRevocationValidation", required = false, defaultValue="true") Boolean withRevocationValidation, @ApiParam(value = "The verifiable credential to validate" ) @Valid @RequestBody VerifiableCredentialDto body);

}

