/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.42).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.eclipse.tractusx.managedidentitywallets.swagger.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.eclipse.tractusx.managedidentitywallets.swagger.model.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;

@javax.annotation.processing.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-05-22T13:09:57.551136732Z[GMT]")
@Validated
public interface ApiApi {

    @Operation(summary = "Query Verifiable Credentials", description = "Permission: **view_wallets** OR **view_wallet** (The BPN of holderIdentifier must equal BPN of caller)  Search verifiable credentials with filter criteria", tags={ "VerifiableCredentials" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The list of verifiable credentials matching the query, empty if no match found", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = VerifiableCredentialDto.class)))),
        
        @ApiResponse(responseCode = "401", description = "The request could not be completed due to a failed authorization.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "The request could not be completed due to a forbidden access.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))) })
    @RequestMapping(value = "/api/credentials",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<VerifiableCredentialDto>> apiCredentialsGet(@Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "holderIdentifier", required = false) String holderIdentifier, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "id", required = false) String id, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "issuerIdentifier", required = false) String issuerIdentifier, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "type", required = false) List<String> type);


    @Operation(summary = "Issue a Use Case Verifiable Credential with base wallet issuer", description = "Permission: **update_wallets** OR **update_wallet** (The BPN of base wallet must equal BPN of caller)  Issue a verifiable credential by base wallet", tags={ "VerifiableCredentials" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The created Verifiable Credential", content = @Content(mediaType = "application/json", schema = @Schema(implementation = VerifiableCredentialDto.class))),
        
        @ApiResponse(responseCode = "400", description = "The input does not comply to the syntax requirements", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "The request could not be completed due to a failed authorization.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "The request could not be completed due to a forbidden access.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "422", description = "The input can not be processed due to semantic mismatches", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))) })
    @RequestMapping(value = "/api/credentials/issuer/dismantler",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<VerifiableCredentialDto> apiCredentialsIssuerDismantlerPost(@Parameter(in = ParameterIn.DEFAULT, description = "The bpn of the holders wallet", required=true, schema=@Schema()) @Valid @RequestBody CreateDismantlerVCDto body);


    @Operation(summary = "Issue a Use Case Verifiable Credential with base wallet issuer", description = "Permission: **update_wallets** OR **update_wallet** (The BPN of base wallet must equal BPN of caller)  Issue a verifiable credential by base wallet", tags={ "VerifiableCredentials" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The created Verifiable Credential", content = @Content(mediaType = "application/json", schema = @Schema(implementation = VerifiableCredentialDto.class))),
        
        @ApiResponse(responseCode = "400", description = "The input does not comply to the syntax requirements", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "The request could not be completed due to a failed authorization.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "The request could not be completed due to a forbidden access.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "422", description = "The input can not be processed due to semantic mismatches", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))) })
    @RequestMapping(value = "/api/credentials/issuer/framework",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<VerifiableCredentialDto> apiCredentialsIssuerFrameworkPost(@Parameter(in = ParameterIn.DEFAULT, description = "The bpn of the holders wallet", required=true, schema=@Schema()) @Valid @RequestBody CreateMembershipVCDto body);


    @Operation(summary = "Issue a Membership Verifiable Credential with base wallet issuer", description = "Permission: **update_wallets** OR **update_wallet** (The BPN of base wallet must equal BPN of caller)  Issue a verifiable credential by base wallet", tags={ "VerifiableCredentials" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The created Verifiable Credential", content = @Content(mediaType = "application/json", schema = @Schema(implementation = VerifiableCredentialDto.class))),
        
        @ApiResponse(responseCode = "400", description = "The input does not comply to the syntax requirements", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "The request could not be completed due to a failed authorization.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "The request could not be completed due to a forbidden access.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "422", description = "The input can not be processed due to semantic mismatches", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))) })
    @RequestMapping(value = "/api/credentials/issuer/membership",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<VerifiableCredentialDto> apiCredentialsIssuerMembershipPost(@Parameter(in = ParameterIn.DEFAULT, description = "The bpn of the holders wallet", required=true, schema=@Schema()) @Valid @RequestBody CreateMembershipVCDto body);


    @Operation(summary = "Issue a Verifiable Credential with base wallet issuer", description = "Permission: **update_wallets** OR **update_wallet** (The BPN of base wallet must equal BPN of caller)  Issue a verifiable credential by base wallet", tags={ "VerifiableCredentials" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The created Verifiable Credential", content = @Content(mediaType = "application/json", schema = @Schema(implementation = VerifiableCredentialDto.class))),
        
        @ApiResponse(responseCode = "400", description = "The input does not comply to the syntax requirements", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "The request could not be completed due to a failed authorization.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "The request could not be completed due to a forbidden access.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "422", description = "The input can not be processed due to semantic mismatches", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))) })
    @RequestMapping(value = "/api/credentials/issuer",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<VerifiableCredentialDto> apiCredentialsIssuerPost(@Parameter(in = ParameterIn.DEFAULT, description = "The verifiable credential input", required=true, schema=@Schema()) @Valid @RequestBody VerifiableCredentialRequestWithoutIssuerDto body);


    @Operation(summary = "Issue Verifiable Credential", description = "Permission: **update_wallets** OR **update_wallet** (The BPN of the issuer of the Verifiable Credential must equal BPN of caller)  Issue a verifiable credential with a given issuer DID", tags={ "VerifiableCredentials" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The created Verifiable Credential", content = @Content(mediaType = "application/json", schema = @Schema(implementation = VerifiableCredentialDto.class))),
        
        @ApiResponse(responseCode = "400", description = "The input does not comply to the syntax requirements", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "The request could not be completed due to a failed authorization.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "The request could not be completed due to a forbidden access.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "422", description = "The input can not be processed due to semantic mismatches", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))) })
    @RequestMapping(value = "/api/credentials",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<VerifiableCredentialDto> apiCredentialsPost(@Parameter(in = ParameterIn.DEFAULT, description = "The verifiable credential input data", required=true, schema=@Schema()) @Valid @RequestBody VerifiableCredentialRequestDto body);


    @Operation(summary = "Validate Verifiable Credential", description = "Permission: **view_wallets** OR **view_wallet**  Validate Verifiable Credentials", tags={ "VerifiableCredentials" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The verification value", content = @Content(mediaType = "application/json", schema = @Schema(implementation = VerifyResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "The input does not comply to the syntax requirements", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "The request could not be completed due to a failed authorization.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "The request could not be completed due to a forbidden access.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "422", description = "The input can not be processed due to semantic mismatches", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))) })
    @RequestMapping(value = "/api/credentials/validation",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<VerifyResponse> apiCredentialsValidationPost(@Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema( defaultValue="false")) @Valid @RequestParam(value = "withDateValidation", required = false, defaultValue="false") Boolean withDateValidation, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema( defaultValue="true")) @Valid @RequestParam(value = "withRevocationValidation", required = false, defaultValue="true") Boolean withRevocationValidation, @Parameter(in = ParameterIn.DEFAULT, description = "The verifiable credential to validate", schema=@Schema()) @Valid @RequestBody VerifiableCredentialDto body);


    @Operation(summary = "Resolve DID Document", description = "Resolve the DID document for a given DID or BPN", tags={ "DIDDocument" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The resolved DID Document", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DidDocumentDto.class))),
        
        @ApiResponse(responseCode = "400", description = "The input does not comply to the syntax requirements", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "The required entity does not exists", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))) })
    @RequestMapping(value = "/api/didDocuments/{identifier}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DidDocumentDto> apiDidDocumentsIdentifierGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("identifier") String identifier);


    @Operation(summary = "Create Verifiable Presentation", description = "Permission: **update_wallets** OR **update_wallet** (The BPN of the issuer of the Verifiable Presentation must equal to BPN of caller)  Create a verifiable presentation from a list of verifiable credentials, signed by the holder", tags={ "VerifiablePresentations" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The created verifiable presentation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = VerifiablePresentationDto.class))),
        
        @ApiResponse(responseCode = "401", description = "The request could not be completed due to a failed authorization.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "The request could not be completed due to a forbidden access.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "422", description = "The input can not be processed due to semantic mismatches", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))) })
    @RequestMapping(value = "/api/presentations",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<VerifiablePresentationDto> apiPresentationsPost(@Parameter(in = ParameterIn.DEFAULT, description = "The verifiable presentation input data", required=true, schema=@Schema()) @Valid @RequestBody VerifiablePresentationRequestDto body, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema( defaultValue="true")) @Valid @RequestParam(value = "asJwt", required = false, defaultValue="true") Boolean asJwt, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema( defaultValue="true")) @Valid @RequestParam(value = "withCredentialsDateValidation", required = false, defaultValue="true") Boolean withCredentialsDateValidation, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema( defaultValue="true")) @Valid @RequestParam(value = "withCredentialsValidation", required = false, defaultValue="true") Boolean withCredentialsValidation, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema( defaultValue="true")) @Valid @RequestParam(value = "withRevocationValidation", required = false, defaultValue="true") Boolean withRevocationValidation);


    @Operation(summary = "Validate Verifiable Presentation", description = "Permission: **view_wallets** OR **view_wallet**  Validate Verifiable Presentation with all included credentials", tags={ "VerifiablePresentations" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The verification value", content = @Content(mediaType = "application/json", schema = @Schema(implementation = VerifyResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "The input does not comply to the syntax requirements", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "The request could not be completed due to a failed authorization.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "The request could not be completed due to a forbidden access.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "422", description = "The input can not be processed due to semantic mismatches", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))) })
    @RequestMapping(value = "/api/presentations/validation",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<VerifyResponse> apiPresentationsValidationPost(@Parameter(in = ParameterIn.DEFAULT, description = "The verifiable presentation to validate", required=true, schema=@Schema()) @Valid @RequestBody VerifiablePresentationDto body, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema( defaultValue="false")) @Valid @RequestParam(value = "withDateValidation", required = false, defaultValue="false") Boolean withDateValidation, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema( defaultValue="true")) @Valid @RequestParam(value = "withRevocationValidation", required = false, defaultValue="true") Boolean withRevocationValidation);


    @Operation(summary = "Store Verifiable Credential", description = "Permission: **update_wallets** OR **update_wallet** (The BPN of wallet to extract credentials from must equal BPN of caller)  Store a verifiable credential in the wallet of the given identifier", tags={ "Wallets" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Success message", content = @Content(mediaType = "application/json", schema = @Schema(implementation = SuccessResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "The request could not be completed due to a failed authorization.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "The request could not be completed due to a forbidden access.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "The required entity does not exists", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "422", description = "The input can not be processed due to semantic mismatches", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))) })
    @RequestMapping(value = "/api/wallet/{identifier}/credentials",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<SuccessResponse> apiWalletIdentifierCredentialsPost(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("identifier") String identifier, @Parameter(in = ParameterIn.DEFAULT, description = "The verifiable credential to be stored", required=true, schema=@Schema()) @Valid @RequestBody IssuedVerifiableCredentialRequestDto body);


    @Operation(summary = "Retrieve wallet by identifier", description = "Permission: **view_wallets** OR **view_wallet** (The BPN of Wallet to retrieve must equal the BPN of caller)  Retrieve single wallet by identifier, with or without its credentials", tags={ "Wallets" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The wallet", content = @Content(mediaType = "application/json", schema = @Schema(implementation = WalletDto.class))),
        
        @ApiResponse(responseCode = "400", description = "The input does not comply to the syntax requirements", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "The request could not be completed due to a failed authorization.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "The request could not be completed due to a forbidden access.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "The required entity does not exists", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))) })
    @RequestMapping(value = "/api/wallet/{identifier}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<WalletDto> apiWalletIdentifierGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("identifier") String identifier, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "withCredentials", required = true) Boolean withCredentials);


    @Operation(summary = "Create wallet", description = "Permission: **add_wallets**  Create a wallet and store it ", tags={ "Wallets" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Wallet was successfully created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = WalletDto.class))),
        
        @ApiResponse(responseCode = "400", description = "The input does not comply to the syntax requirements", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "The request could not be completed due to a failed authorization.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "The request could not be completed due to a forbidden access.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "409", description = "The request could not be completed due to a conflict.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))) })
    @RequestMapping(value = "/api/wallet",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<WalletDto> apiWalletPost(@Parameter(in = ParameterIn.DEFAULT, description = "wallet to create", required=true, schema=@Schema()) @Valid @RequestBody WalletCreateDto body);


    @Operation(summary = "List of wallets", description = "Permission: **view_wallets**  Retrieve list of registered wallets", tags={ "Wallets" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of wallets", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = WalletDto.class)))),
        
        @ApiResponse(responseCode = "401", description = "The request could not be completed due to a failed authorization.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "The request could not be completed due to a forbidden access.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ExceptionResponse.class))) })
    @RequestMapping(value = "/api/wallets",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<WalletDto>> apiWalletsGet();

}

