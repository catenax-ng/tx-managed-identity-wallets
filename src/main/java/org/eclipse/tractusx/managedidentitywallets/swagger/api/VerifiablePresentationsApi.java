/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.42).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.eclipse.tractusx.managedidentitywallets.swagger.api;

import io.swagger.annotations.*;
import io.swagger.model.ExceptionResponse;
import io.swagger.model.VerifiablePresentationDto;
import io.swagger.model.VerifiablePresentationRequestDto;
import io.swagger.model.VerifyResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;

@javax.annotation.processing.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-05-24T08:44:38.406697803Z[GMT]")
@Validated
@Api(value = "VerifiablePresentations", description = "the VerifiablePresentations API")
public interface VerifiablePresentationsApi {

    @ApiOperation(value = "Create Verifiable Presentation", nickname = "apiPresentationsPost", notes = "Permission: **update_wallets** OR **update_wallet** (The BPN of the issuer of the Verifiable Presentation must equal to BPN of caller)  Create a verifiable presentation from a list of verifiable credentials, signed by the holder", response = VerifiablePresentationDto.class, tags={ "VerifiablePresentations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The created verifiable presentation", response = VerifiablePresentationDto.class),
        @ApiResponse(code = 401, message = "The request could not be completed due to a failed authorization.", response = ExceptionResponse.class),
        @ApiResponse(code = 403, message = "The request could not be completed due to a forbidden access.", response = ExceptionResponse.class),
        @ApiResponse(code = 422, message = "The input can not be processed due to semantic mismatches", response = ExceptionResponse.class) })
    @RequestMapping(value = "/api/presentations",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<VerifiablePresentationDto> apiPresentationsPost(@ApiParam(value = "The verifiable presentation input data", required=true ) @Valid @RequestBody VerifiablePresentationRequestDto body, @ApiParam(value = "", defaultValue = "true") @Valid @RequestParam(value = "asJwt", required = false, defaultValue="true") Boolean asJwt, @ApiParam(value = "", defaultValue = "true") @Valid @RequestParam(value = "withCredentialsDateValidation", required = false, defaultValue="true") Boolean withCredentialsDateValidation, @ApiParam(value = "", defaultValue = "true") @Valid @RequestParam(value = "withCredentialsValidation", required = false, defaultValue="true") Boolean withCredentialsValidation, @ApiParam(value = "", defaultValue = "true") @Valid @RequestParam(value = "withRevocationValidation", required = false, defaultValue="true") Boolean withRevocationValidation);


    @ApiOperation(value = "Validate Verifiable Presentation", nickname = "apiPresentationsValidationPost", notes = "Permission: **view_wallets** OR **view_wallet**  Validate Verifiable Presentation with all included credentials", response = VerifyResponse.class, tags={ "VerifiablePresentations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The verification value", response = VerifyResponse.class),
        @ApiResponse(code = 400, message = "The input does not comply to the syntax requirements", response = ExceptionResponse.class),
        @ApiResponse(code = 401, message = "The request could not be completed due to a failed authorization.", response = ExceptionResponse.class),
        @ApiResponse(code = 403, message = "The request could not be completed due to a forbidden access.", response = ExceptionResponse.class),
        @ApiResponse(code = 422, message = "The input can not be processed due to semantic mismatches", response = ExceptionResponse.class) })
    @RequestMapping(value = "/api/presentations/validation",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<VerifyResponse> apiPresentationsValidationPost(@ApiParam(value = "The verifiable presentation to validate", required=true ) @Valid @RequestBody VerifiablePresentationDto body, @ApiParam(value = "", defaultValue = "false") @Valid @RequestParam(value = "withDateValidation", required = false, defaultValue="false") Boolean withDateValidation, @ApiParam(value = "", defaultValue = "true") @Valid @RequestParam(value = "withRevocationValidation", required = false, defaultValue="true") Boolean withRevocationValidation);

}

