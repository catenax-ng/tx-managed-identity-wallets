{
	"openapi": "3.0.3",
	"info": {
		"title": "Catena X Managed Identity Wallet",
		"description": "This is the Managed Identity Wallet APIs.\n\nSome useful links:\n- [The Managed Identity Wallet repository](https://)",
		"termsOfService": "http://",
		"contact": {
			"email": "dev@ctx.net"
		},
		"license": {
			"name": "Apache 2.0",
			"url": "http://www.apache.org/licenses/LICENSE-2.0.html"
		},
		"version": "1.0.11"
	},
	"servers": [
		{
			"url": "https://managed-identity-wallets.network/api/v1"
		}
	],
	"tags": [
		{
			"name": "wallet",
			"description": "managed wallet interfaces"
		},
		{
			"name": "did",
			"description": "manage Decentalized Idendity API",
			"externalDocs": {
				"description": "Find out more about our did",
				"url": "http://swagger.io"
			}
		},
		{
			"name": "verified_credential",
			"description": "Operations about VC"
		},
		{
			"name": "verified_presentation",
			"description": "Operations about VP"
		}
	],
	"paths": {
		"/wallet": {
			"post": {
				"tags": [
					"wallet"
				],
				"summary": "Create New Wallet",
				"description": "The MIW will create a DID-Document and a internal Tenant for the DID which will be accessed via a technical user",
				"operationId": "addwallet",
				"requestBody": {
					"description": "Create a new wallet in the store",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/wallet"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/wallet"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/wallet"
								}
							}
						}
					},
					"405": {
						"description": "Invalid input"
					}
				},
				"security": [
					{
						"walletstore_auth": [
							"write:wallets",
							"read:wallets"
						]
					}
				]
			}
		},
		"/wallet/findByName": {
			"get": {
				"tags": [
					"wallet"
				],
				"summary": "Finds wallet by name",
				"description": "Find wallet information by name",
				"operationId": "findwalletsByStatus",
				"parameters": [
					{
						"name": "name",
						"in": "query",
						"description": "provide name which is used for the naming system",
						"required": true,
						"explode": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/wallet"
									}
								}
							},
							"application/xml": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/wallet"
									}
								}
							}
						}
					},
					"400": {
						"description": "Invalid status value"
					}
				}
			}
		},
		"/wallet/findByBPN": {
			"get": {
				"tags": [
					"wallet"
				],
				"summary": "Finds wallets by BPN",
				"description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
				"operationId": "findwalletsByTags",
				"parameters": [
					{
						"name": "tags",
						"in": "query",
						"description": "Tags to filter by",
						"required": false,
						"explode": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/wallet"
									}
								}
							},
							"application/xml": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/wallet"
									}
								}
							}
						}
					},
					"400": {
						"description": "Invalid tag value"
					}
				},
				"security": [
					{
						"walletstore_auth": [
							"write:wallets",
							"read:wallets"
						]
					}
				]
			}
		},
		"/wallet/freeze/{walletId}": {
			"delete": {
				"tags": [
					"wallet"
				],
				"summary": "Freeze a wallet",
				"description": "Freeze a wallet",
				"parameters": [
					{
						"name": "walletId",
						"in": "path",
						"description": "The walletId that needs to be freezed",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"400": {
						"description": "Invalid username supplied"
					},
					"404": {
						"description": "User not found"
					}
				}
			}
		},
		"/did": {
			"post": {
				"tags": [
					"did"
				],
				"summary": "Create a DID",
				"description": "Create a DID",
				"operationId": "placeOrder",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DID"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DID"
								}
							}
						}
					},
					"405": {
						"description": "Invalid input"
					}
				}
			}
		},
		"/did/{did}": {
			"get": {
				"tags": [
					"did"
				],
				"summary": "retrieve a DID Document  by did",
				"description": "retrieve a DID Document  by did",
				"operationId": "getOrderById",
				"parameters": [
					{
						"name": "did",
						"in": "path",
						"description": "ID of order that needs to be fetched",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int64"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DID"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/DID"
								}
							}
						}
					},
					"400": {
						"description": "Invalid ID supplied"
					},
					"404": {
						"description": "Order not found"
					}
				}
			},
			"put": {
				"tags": [
					"did"
				],
				"summary": "update a DID Document  by did",
				"description": "update a DID Document  is actuallz creating a new higher version of DID with new contents",
				"parameters": [
					{
						"name": "did",
						"in": "path",
						"description": "ID of order that needs to be fetched",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int64"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DID"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/DID"
								}
							}
						}
					},
					"400": {
						"description": "Invalid ID supplied"
					},
					"404": {
						"description": "Order not found"
					}
				}
			}
		},
		"/verified_credential": {
			"post": {
				"tags": [
					"verified_credential"
				],
				"summary": "Create a VC",
				"description": "Create a VC",
				"operationId": "createUser",
				"requestBody": {
					"description": "Created user object",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VC"
							}
						},
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/VC"
							}
						},
						"application/x-www-form-urlencoded": {
							"schema": {
								"$ref": "#/components/schemas/VC"
							}
						}
					}
				},
				"responses": {
					"default": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VC"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/VC"
								}
							}
						}
					}
				}
			}
		},
		"/verified_credential/verify/{vcId}": {
			"post": {
				"tags": [
					"verified_credential"
				],
				"summary": "Verify a VC",
				"description": "Verify a VC",
				"operationId": "verifyVC",
				"requestBody": {
					"description": "Created user object",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VC"
							}
						},
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/VC"
							}
						},
						"application/x-www-form-urlencoded": {
							"schema": {
								"$ref": "#/components/schemas/VC"
							}
						}
					}
				},
				"responses": {
					"default": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VC"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/VC"
								}
							}
						}
					}
				}
			}
		},
		"/verified_credential/{vcId}": {
			"get": {
				"tags": [
					"verified_credential"
				],
				"summary": "Retrieve the VC",
				"description": "",
				"operationId": "loginUser",
				"parameters": [
					{
						"name": "vcId",
						"in": "query",
						"description": "The user name for login",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"headers": {
							"X-Rate-Limit": {
								"description": "calls per hour allowed by the user",
								"schema": {
									"type": "integer",
									"format": "int32"
								}
							},
							"X-Expires-After": {
								"description": "date in UTC when token expires",
								"schema": {
									"type": "string",
									"format": "date-time"
								}
							}
						},
						"content": {
							"application/xml": {
								"schema": {
									"type": "string"
								}
							},
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "Invalid username/password supplied"
					}
				}
			}
		},
		"/verified_credential/revoke/{vcId}": {
			"delete": {
				"tags": [
					"verified_credential"
				],
				"summary": "Revoke a credential",
				"description": "Revoke a credential",
				"parameters": [
					{
						"name": "vcId",
						"in": "path",
						"description": "The name that needs to be deleted",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"400": {
						"description": "Invalid username supplied"
					},
					"404": {
						"description": "User not found"
					}
				}
			}
		},
		"/verified_presentation": {
			"post": {
				"tags": [
					"verified_presentation"
				],
				"summary": "create a VP",
				"description": "",
				"operationId": "createVP",
				"responses": {
					"200": {
						"description": "successful operation",
						"headers": {
							"X-Rate-Limit": {
								"description": "calls per hour allowed by the user",
								"schema": {
									"type": "integer",
									"format": "int32"
								}
							},
							"X-Expires-After": {
								"description": "date in UTC when token expires",
								"schema": {
									"type": "string",
									"format": "date-time"
								}
							}
						},
						"content": {
							"application/xml": {
								"schema": {
									"type": "string"
								}
							},
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "Invalid username/password supplied"
					}
				}
			}
		},
		"/verified_presentation/verify/{vpId}": {
			"post": {
				"tags": [
					"verified_presentation"
				],
				"summary": "Verify VP",
				"description": "Verify VP",
				"operationId": "verifyVP",
				"requestBody": {
					"description": "Verify VP",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VP"
							}
						}
					}
				},
				"responses": {
					"default": {
						"description": "successful operation'",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VP"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/VP"
								}
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"DID": {
				"type": "object"
			},
			"VC": {
				"type": "object"
			},
			"VP": {
				"type": "object"
			},
			"Tag": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int64"
					},
					"name": {
						"type": "string"
					}
				},
				"xml": {
					"name": "tag"
				}
			},
			"wallet": {
				"required": [
					"name",
					"bpn"
				],
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"example": "mercedes-benz"
					},
					"bpn": {
						"type": "string",
						"example": "bpn111222333444"
					}
				}
			},
			"ApiResponse": {
				"type": "object",
				"properties": {
					"code": {
						"type": "integer",
						"format": "int32"
					},
					"type": {
						"type": "string"
					},
					"message": {
						"type": "string"
					}
				},
				"xml": {
					"name": "##default"
				}
			}
		},
		"requestBodies": {
			"VP": {
				"description": "wallet object that needs to be added to the store",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/VP"
						}
					}
				}
			},
			"did": {
				"description": "wallet object that needs to be added to the store",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/wallet"
						}
					}
				}
			},
			"wallet": {
				"description": "wallet object that needs to be added to the store",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/wallet"
						}
					},
					"application/xml": {
						"schema": {
							"$ref": "#/components/schemas/wallet"
						}
					}
				}
			},
			"UserArray": {
				"description": "List of user object",
				"content": {
					"application/json": {
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/components/schemas/VC"
							}
						}
					}
				}
			}
		},
		"securitySchemes": {
			"walletstore_auth": {
				"type": "oauth2",
				"flows": {
					"implicit": {
						"authorizationUrl": "https://walletstore3.swagger.io/oauth/authorize",
						"scopes": {
							"write:wallets": "modify wallets in your account",
							"read:wallets": "read your wallets"
						}
					}
				}
			},
			"api_key": {
				"type": "apiKey",
				"name": "api_key",
				"in": "header"
			}
		}
	}
}